#include "Transfer.h"  
#include "FEProblem.h"  
#include "MooseTypes.h"  
#include "libmesh/system.h"  
#include <boost/interprocess/managed_shared_memory.hpp>  
#include <boost/interprocess/sync/named_mutex.hpp>  

using namespace boost::interprocess;  

class SharedMemoryTransfer : public Transfer {  
public:  
    static InputParameters validParams();  
    SharedMemoryTransfer(const InputParameters & parameters);  

    virtual void execute() override;  

private:  
    void writeToSharedMemory();  
    void readFromSharedMemory();  

    const std::string _shm_name;          // 共享内存名称  
    const std::string _mutex_name;       // 互斥锁名称  
    const VariableName _source_var_name;  // 源变量名称  
    const VariableName _target_var_name;  // 目标变量名称  
};  

template <>  
InputParameters validParams<SharedMemoryTransfer>() {  
    InputParameters params = Transfer::validParams();  
    params.addRequiredParam<std::string>("shm_name", "Shared memory name");  
    params.addRequiredParam<std::string>("mutex_name", "Mutex name");  
    params.addRequiredParam<VariableName>("source_var", "Source variable name");  
    params.addRequiredParam<VariableName>("target_var", "Target variable name");  
    return params;  
}  

SharedMemoryTransfer::SharedMemoryTransfer(const InputParameters & parameters)  
    : Transfer(parameters),  
      _shm_name(getParam<std::string>("shm_name")),  
      _mutex_name(getParam<std::string>("mutex_name")),  
      _source_var_name(getParam<VariableName>("source_var")),  
      _target_var_name(getParam<VariableName>("target_var")) {}  

void SharedMemoryTransfer::execute() {  
    // 写入共享内存  
    writeToSharedMemory();  

    // 读取共享内存  
    readFromSharedMemory();  
}  

void SharedMemoryTransfer::writeToSharedMemory() {  
    // 获取源变量数据  
    System & source_system = _subproblem->getSystem(_source_var_name);  
    const DofMap & source_dof_map = source_system.get_dof_map();  
    NumericVector<Number> & source_solution = *source_system.solution;  

    // 创建或打开共享内存  
    managed_shared_memory segment(open_or_create, _shm_name.c_str(), 1024 * 1024); // 1MB共享内存  
    named_mutex mutex(open_or_create, _mutex_name.c_str());  

    // 在共享内存中构造SharedData对象  
    SharedData* shared_data = segment.find_or_construct<SharedData>("SharedData")();  

    // 写入数据  
    {  
        scoped_lock<named_mutex> lock(mutex);  
        shared_data->moose_to_external.clear();  
        for (const auto & dof : source_dof_map.get_local_dof_indices()) {  
            shared_data->moose_to_external.push_back(source_solution(dof));  
        }  
        shared_data->moose_updated = true; // 设置更新标志  
    }  
}  

void SharedMemoryTransfer::readFromSharedMemory() {  
    // 创建或打开共享内存  
    managed_shared_memory segment(open_or_create, _shm_name.c_str(), 1024 * 1024); // 1MB共享内存  
    named_mutex mutex(open_or_create, _mutex_name.c_str());  

    // 获取共享内存中的SharedData对象  
    SharedData* shared_data = segment.find<SharedData>("SharedData").first;  

    // 读取数据  
    {  
        scoped_lock<named_mutex> lock(mutex);  
        if (shared_data->external_updated) {  
            System & target_system = _subproblem->getSystem(_target_var_name);  
            NumericVector<Number> & target_solution = *target_system.solution;  

            for (unsigned int i = 0; i < shared_data->external_to_moose.size(); ++i) {  
                target_solution.set(i, shared_data->external_to_moose[i]);  
            }  
            target_solution.close();  

            shared_data->external_updated = false; // 清除更新标志  
        }  
    }  
}